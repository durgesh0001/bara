{"version":3,"file":"Paginator.js","sourceRoot":"","sources":["../../src/Paginator.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAA2B,QAAQ,EAAE,MAAM,eAAe,CAAC;AACpF,OAAO,EAAE,SAAS,EAAa,MAAM,aAAa,CAAC;AAMnD,IAAa,SAAS;IAWlB,mBAAuC,aAAwB;QAA/D,iBACC;QADsC,kBAAa,GAAb,aAAa,CAAW;QAHxD,eAAU,GAAW,CAAC,CAAC;QAoBtB,2BAAsB,GAAG,UAAC,KAAgB;YAC9C,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC;IArBF,CAAC;IAEM,+BAAW,GAAlB,UAAmB,OAAsC;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC;QACvD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC;IAEM,2BAAO,GAAd,UAAe,UAAkB;QAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IAEM,iCAAa,GAApB,UAAqB,UAAkB;QACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAQL,gBAAC;AAAD,CAAC,AAlCD,IAkCC;AAhCqB;IAAjB,KAAK,CAAC,SAAS,CAAC;8BAAe,SAAS;+CAAC;AAFjC,SAAS;IAJrB,SAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,QAAQ,EAAE,2BAA2B;KACxC,CAAC;IAYsB,WAAA,QAAQ,EAAE,CAAA;qCAAwB,SAAS;GAXtD,SAAS,CAkCrB;SAlCY,SAAS","sourcesContent":["import { Component, Input, SimpleChange, OnChanges, Optional } from \"@angular/core\";\nimport { DataTable, PageEvent } from \"./DataTable\";\n\n@Component({\n    selector: \"mfPaginator\",\n    template: `<ng-content></ng-content>`\n})\nexport class Paginator implements OnChanges {\n\n    @Input(\"mfTable\") inputMfTable: DataTable;\n\n    private mfTable: DataTable;\n\n    public activePage: number;\n    public rowsOnPage: number;\n    public dataLength: number = 0;\n    public lastPage: number;\n\n    public constructor(@Optional() private injectMfTable: DataTable) {\n    }\n\n    public ngOnChanges(changes: {[key: string]: SimpleChange}): any {\n        this.mfTable = this.inputMfTable || this.injectMfTable;\n        this.onPageChangeSubscriber(this.mfTable.getPage());\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\n    }\n\n    public setPage(pageNumber: number): void {\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\n    }\n\n    public setRowsOnPage(rowsOnPage: number): void {\n        this.mfTable.setPage(this.activePage, rowsOnPage);\n    }\n\n    private onPageChangeSubscriber = (event: PageEvent)=> {\n        this.activePage = event.activePage;\n        this.rowsOnPage = event.rowsOnPage;\n        this.dataLength = event.dataLength;\n        this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);\n    };\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}